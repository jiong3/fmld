    
SELECT
    CASE
        /*
         * First, check if the original reference points to a specific definition (definition_id_dst is not NULL).
         * This corresponds to your first and second priority rules.
         */
        WHEN original_ref.definition_id_dst IS NOT NULL THEN
            COALESCE(
                /*
                 * Priority 1: Find the rank of the last outgoing reference from the destination definition.
                 * The subquery looks for all references originating from that specific definition and picks the highest rank.
                 * If no such references exist, this subquery will return NULL.
                 */
                (
                    SELECT MAX(shared.rank)
                    FROM dict_reference AS outgoing_ref
                    JOIN dict_shared AS shared ON outgoing_ref.shared_id = shared.id
                    WHERE outgoing_ref.word_id_src = original_ref.word_id_dst
                      AND outgoing_ref.definition_id_src = original_ref.definition_id_dst
                ),
                /*
                 * Priority 2: If the first subquery was NULL (no outgoing references), COALESCE falls back to this one.
                 * This finds the rank of the destination definition itself.
                 */
                (
                    SELECT shared.rank
                    FROM dict_definition AS def
                    JOIN dict_shared AS shared ON def.shared_id = shared.id
                    WHERE def.id = original_ref.definition_id_dst
                )
            )

        /*
         * If definition_id_dst is NULL, the original reference points to a word in general.
         * This corresponds to your third and fourth priority rules.
         */
        ELSE
            COALESCE(
                /*
                 * Priority 3: Find the rank of the last outgoing reference from the destination word.
                 * This subquery looks for references originating from the word itself (not tied to a specific definition).
                 * It will return NULL if no such references exist.
                 */
                (
                    SELECT MAX(shared.rank)
                    FROM dict_reference AS outgoing_ref
                    JOIN dict_shared AS shared ON outgoing_ref.shared_id = shared.id
                    WHERE outgoing_ref.word_id_src = original_ref.word_id_dst
                      AND outgoing_ref.definition_id_src IS NULL
                ),
                /*
                 * Priority 4: If the third subquery was NULL, COALESCE falls back to this one.
                 * This finds the rank of the destination word itself.
                 */
                (
                    SELECT shared.rank
                    FROM dict_word AS word
                    JOIN dict_shared AS shared ON word.shared_id = shared.id
                    WHERE word.id = original_ref.word_id_dst
                )
            )
    END AS correct_rank
FROM
    dict_reference AS original_ref
WHERE
    original_ref.id = ?; -- Replace ? with the ID of the existing reference

  